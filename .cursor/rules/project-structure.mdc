---
description: 
globs: 
alwaysApply: true
---
# RepoHub 项目结构与架构设计指南

## 概述
RepoHub是一个友好易用的Git多仓库管理工具。
使用 Photino.Blazor 跨平台桌面应用技术构建，采用 Native AOT 编译。

## 技术栈
- [Program.cs](mdc:Program.cs) - 使用 Photino.Blazor 作为桌面宿主
- Blazor 用于 UI 渲染
- [MudBlazor](mdc:https:/mudblazor.com) 作为 UI 组件库。需要关注 MudBlazor 8.x 的破坏性变更

## 核心文件
- [Program.cs](mdc:Program.cs) - 应用程序入口点和主要配置
- [App.razor](mdc:App.razor) - Blazor 应用程序根组件
- [_Imports.razor](mdc:_Imports.razor) - 全局 using 声明

## 主要目录
- `Pages/` - 包含所有 Blazor 页面组件
- `Shared/` - 包含可重用的共享组件
- `wwwroot/` - 静态资源文件（CSS、JS、图片等）

## 配置文件
- [RepoHub.csproj](mdc:RepoHub.csproj) - 项目配置和依赖项
- [.editorconfig](mdc:.editorconfig) - 编码风格和格式化规则

## 架构层次
1. **表示层** - Blazor 组件 (Pages/ 和 Shared/)
2. **服务层** - 处理业务逻辑
3. **数据访问层** - 管理外部数据交互

## 依赖注入
- 服务在 [Program.cs](mdc:Program.cs) 中注册
- 通过 @inject 指令在组件中使用
- 遵循接口优先的设计原则

## 状态管理
- 使用服务层管理全局状态
- 组件状态应当本地化
- 对于复杂状态，考虑使用状态容器模式

## 错误处理
- 集中式错误处理在 [Program.cs](mdc:Program.cs) 中配置
- 组件级别错误应当优雅降级
- 记录错误但不暴露实现细节给用户

## 性能考虑
1. AOT 编译提高启动性能
2. 懒加载大型组件
3. 使用虚拟化处理长列表

## 扩展性设计
1. 使用插件架构添加新功能
2. 设计时考虑未来扩展
3. 使用事件驱动架构减少组件耦合

## 开发指南
1. 所有新页面应放在 `Pages` 目录下
2. 共享组件应放在 `Shared` 目录下
3. 静态资源文件应放在 `wwwroot` 目录下
4. 遵循文件命名约定：
   - 页面组件：`PageName.razor`
   - 共享组件：`ComponentName.razor`
   - 代码隐藏文件：`ComponentName.razor.cs`
5. 其他源代码文件放在 `Sources` 目录下




